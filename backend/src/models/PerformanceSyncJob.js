const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const PerformanceSyncJob = sequelize.define('PerformanceSyncJob', {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    sync_id: {
        type: DataTypes.UUID,
        allowNull: false,
        comment: 'UUID generated by frontend to group all jobs from a single sync operation'
    },
    branch_id: {
        type: DataTypes.INTEGER,
        allowNull: true,
        references: {
            model: 'branch',
            key: 'id'
        }
    },
    branch_name: {
        type: DataTypes.STRING(100),
        allowNull: false
    },
    status_filter: {
        type: DataTypes.STRING(100),
        allowNull: false
    },
    row_number: {
        type: DataTypes.INTEGER,
        allowNull: false
    },
    sheet_name: {
        type: DataTypes.STRING(100),
        allowNull: false
    },
    job_name: {
        type: DataTypes.STRING(255),
        allowNull: true
    },
    job_status: {
        type: DataTypes.STRING(100),
        allowNull: true
    },
    start_date: {
        type: DataTypes.DATEONLY,
        allowNull: true
    },
    finish_date: {
        type: DataTypes.DATEONLY,
        allowNull: true
    },
    estimator: {
        type: DataTypes.STRING(255),
        allowNull: true
    },
    crew_leader: {
        type: DataTypes.STRING(255),
        allowNull: true
    },
    at_estimated_hours: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: true
    },
    cl_estimated_hours: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: true
    },
    percent_planned_to_save: {
        type: DataTypes.DECIMAL(5, 2),
        allowNull: true
    },
    actual_percent_saved: {
        type: DataTypes.DECIMAL(5, 2),
        allowNull: true
    },
    job_bonus_pool: {
        type: DataTypes.DECIMAL(10, 2),
        allowNull: true
    },
    raw_data: {
        type: DataTypes.JSONB,
        allowNull: true,
        comment: 'Complete JSON data received from Make.com'
    },
    matched_job_id: {
        type: DataTypes.INTEGER,
        allowNull: true,
        references: {
            model: 'job',
            key: 'id'
        }
    },
    match_status: {
        type: DataTypes.STRING(50),
        defaultValue: 'pending',
        comment: 'pending, matched, no_match, manual'
    },
    match_confidence: {
        type: DataTypes.DECIMAL(3, 2),
        allowNull: true,
        comment: 'Confidence score from 0.00 to 1.00'
    },
    created_at: {
        type: DataTypes.DATE,
        defaultValue: DataTypes.NOW,
        field: 'created_at'
    },
    expires_at: {
        type: DataTypes.DATE,
        defaultValue: () => new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now
        field: 'expires_at'
    }
}, {
    tableName: 'performance_sync_jobs',
    schema: 'botzilla',
    timestamps: false,
    indexes: [
        {
            unique: true,
            fields: ['sync_id', 'row_number'],
            name: 'unique_sync_row'
        },
        {
            fields: ['sync_id'],
            name: 'idx_performance_sync_jobs_sync_id'
        },
        {
            fields: ['branch_id'],
            name: 'idx_performance_sync_jobs_branch_id'
        },
        {
            fields: ['expires_at'],
            name: 'idx_performance_sync_jobs_expires_at'
        },
        {
            fields: ['match_status'],
            name: 'idx_performance_sync_jobs_match_status'
        }
    ]
});

module.exports = PerformanceSyncJob;

