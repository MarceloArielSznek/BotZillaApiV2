-- Migration: Create performance_sync_jobs table
-- Purpose: Temporary staging table for jobs synced from Performance spreadsheet
-- Used for: Matching spreadsheet jobs with BuilderTrend data and importing hours

CREATE TABLE IF NOT EXISTS botzilla.performance_sync_jobs (
    id SERIAL PRIMARY KEY,
    
    -- Sync identification
    sync_id UUID NOT NULL,
    branch_id INTEGER REFERENCES botzilla.branch(id),
    branch_name VARCHAR(100) NOT NULL,
    status_filter VARCHAR(100) NOT NULL,
    
    -- Spreadsheet row identification
    row_number INTEGER NOT NULL,
    sheet_name VARCHAR(100) NOT NULL,
    
    -- Job data (mapped from spreadsheet columns)
    job_name VARCHAR(255),                    -- Column 1 (B)
    job_status VARCHAR(100),                  -- Column 2 (C)
    start_date DATE,                          -- Column 4 (E)
    finish_date DATE,                         -- Column 5 (F)
    estimator VARCHAR(255),                   -- Column 10 (K)
    crew_leader VARCHAR(255),                 -- Column 11 (L)
    at_estimated_hours DECIMAL(10,2),         -- Column 12 (M)
    cl_estimated_hours DECIMAL(10,2),         -- Column 13 (N)
    percent_planned_to_save DECIMAL(5,2),     -- Column 14 (O)
    actual_percent_saved DECIMAL(5,2),        -- Column 15 (P)
    job_bonus_pool DECIMAL(10,2),             -- Column 16 (Q)
    
    -- Full raw data from Make.com (for debugging and additional fields)
    raw_data JSONB,
    
    -- Matching status
    matched_job_id INTEGER REFERENCES botzilla.job(id),
    match_status VARCHAR(50) DEFAULT 'pending', -- pending, matched, no_match, manual
    match_confidence DECIMAL(3,2),              -- 0.00 to 1.00
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE DEFAULT (CURRENT_TIMESTAMP + INTERVAL '24 hours'),
    
    -- Indexes for performance
    CONSTRAINT unique_sync_row UNIQUE (sync_id, row_number)
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_performance_sync_jobs_sync_id ON botzilla.performance_sync_jobs(sync_id);
CREATE INDEX IF NOT EXISTS idx_performance_sync_jobs_branch_id ON botzilla.performance_sync_jobs(branch_id);
CREATE INDEX IF NOT EXISTS idx_performance_sync_jobs_expires_at ON botzilla.performance_sync_jobs(expires_at);
CREATE INDEX IF NOT EXISTS idx_performance_sync_jobs_match_status ON botzilla.performance_sync_jobs(match_status);

-- Auto-cleanup function: Delete expired records
CREATE OR REPLACE FUNCTION botzilla.cleanup_expired_performance_sync_jobs()
RETURNS void AS $$
BEGIN
    DELETE FROM botzilla.performance_sync_jobs
    WHERE expires_at < CURRENT_TIMESTAMP;
END;
$$ LANGUAGE plpgsql;

-- Schedule cleanup (this would be called by a cron job or scheduled task)
COMMENT ON FUNCTION botzilla.cleanup_expired_performance_sync_jobs() IS 
'Deletes performance sync jobs older than 24 hours. Should be run daily by a scheduled task.';

-- Comments
COMMENT ON TABLE botzilla.performance_sync_jobs IS 
'Temporary staging table for jobs synced from Performance spreadsheet. Records auto-expire after 24 hours.';

COMMENT ON COLUMN botzilla.performance_sync_jobs.sync_id IS 
'UUID generated by frontend to group all jobs from a single sync operation';

COMMENT ON COLUMN botzilla.performance_sync_jobs.raw_data IS 
'Complete JSON data received from Make.com for debugging and future use';

COMMENT ON COLUMN botzilla.performance_sync_jobs.match_status IS 
'Status of matching: pending (not yet matched), matched (found in jobs table), no_match (not found), manual (user override)';

